AWSTemplateFormatVersion: '2010-09-09'
Description: 'Setup for GenAI Application with RAG'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name for resources

Resources:
  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0440d3b780d96b29d  # Amazon Linux 2023 AMI (update as needed)
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y git
          curl -sL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs-18.20.2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # S3 Bucket for Static Files
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${EnvironmentName}-static-website-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket for RAG Documents
  RAGDocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${EnvironmentName}-rag-documents-${AWS::AccountId}'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvironmentName}-genai-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${EnvironmentName}-user-pool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${EnvironmentName}-app-client'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # DynamoDB Table
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${EnvironmentName}-chat-history'
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # Bedrock Access
  BedrockPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: 
              - !Sub 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
              - !Sub 'arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0'

  # OpenSearch Domain
  OpenSearchDomain:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: !Sub '${EnvironmentName}-search'
      Description: 'Collection for RAG implementation'
      Type: 'SEARCH'

Outputs:
  EC2InstanceId:
    Description: ID of EC2 instance
    Value: !Ref EC2Instance

  StaticWebsiteBucketName:
    Description: Name of S3 bucket for static files
    Value: !Ref StaticWebsiteBucket

  RAGDocumentsBucketName:
    Description: Name of S3 bucket for RAG documents
    Value: !Ref RAGDocumentsBucket

  UserPoolId:
    Description: ID of Cognito User Pool
    Value: !Ref UserPool

  UserPoolClientId:
    Description: ID of Cognito User Pool Client
    Value: !Ref UserPoolClient

  ApiGatewayUrl:
    Description: URL of API Gateway
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'

  ChatHistoryTableName:
    Description: Name of DynamoDB table
    Value: !Ref ChatHistoryTable

  OpenSearchDomainEndpoint:
    Description: Endpoint of OpenSearch Domain
    Value: !GetAtt OpenSearchDomain.CollectionEndpoint
